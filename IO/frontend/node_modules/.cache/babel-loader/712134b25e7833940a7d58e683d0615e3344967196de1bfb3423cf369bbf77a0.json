{"ast":null,"code":"const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst fileUpload = require('express-fileupload');\nconst path = require('path');\nconst cors = require('cors');\nconst fs = require('fs');\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: '*',\n    // Allow all origins for Socket.io\n    methods: ['GET', 'POST'],\n    allowedHeaders: ['Content-Type']\n  }\n});\nconst chatHistoryFile = path.join(__dirname, 'chatHistory.json');\n\n// Load chat history from JSON file\nlet chatHistory = [];\nif (fs.existsSync(chatHistoryFile)) {\n  const data = fs.readFileSync(chatHistoryFile, 'utf8');\n  chatHistory = JSON.parse(data);\n}\n\n// Apply CORS middleware globally\napp.use(cors());\napp.use(fileUpload());\napp.use(express.static('uploads')); // Serve uploaded files\n\n// Ensure the uploads directory exists\nconst uploadDir = path.join(__dirname, 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\nio.on('connection', socket => {\n  console.log('Connected');\n\n  // Send chat history to new clients\n  socket.emit('history', chatHistory);\n  socket.on('msg', mydata => {\n    console.log('Server received: ', mydata);\n    chatHistory.push(mydata);\n    fs.writeFileSync(chatHistoryFile, JSON.stringify(chatHistory, null, 2));\n    io.emit('msg', mydata);\n  });\n  socket.on('file-upload', fileData => {\n    chatHistory.push(fileData);\n    fs.writeFileSync(chatHistoryFile, JSON.stringify(chatHistory, null, 2));\n    io.emit('file-upload', fileData);\n  });\n});\napp.post('/upload', (req, res) => {\n  if (!req.files || Object.keys(req.files).length === 0) {\n    return res.status(400).send('No files were uploaded.');\n  }\n  let file = req.files.file;\n  let uploadPath = path.join(__dirname, 'uploads', file.name);\n  file.mv(uploadPath, err => {\n    if (err) {\n      return res.status(500).send(err);\n    }\n    res.json({\n      fileName: file.name,\n      filePath: `http://192.168.0.27:4000/${file.name}`\n    });\n  });\n});\nconst PORT = 4000;\nserver.listen(PORT, () => {\n  console.log(`Listening to port ${PORT}`);\n});","map":{"version":3,"names":["express","require","http","socketIo","fileUpload","path","cors","fs","app","server","createServer","io","origin","methods","allowedHeaders","chatHistoryFile","join","__dirname","chatHistory","existsSync","data","readFileSync","JSON","parse","use","static","uploadDir","mkdirSync","on","socket","console","log","emit","mydata","push","writeFileSync","stringify","fileData","post","req","res","files","Object","keys","length","status","send","file","uploadPath","name","mv","err","json","fileName","filePath","PORT","listen"],"sources":["/Users/benny/Documents/GitHub/kebab_chat/Kebab_chat/IO/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst fileUpload = require('express-fileupload');\nconst path = require('path');\nconst cors = require('cors');\nconst fs = require('fs');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: '*', // Allow all origins for Socket.io\n    methods: ['GET', 'POST'],\n    allowedHeaders: ['Content-Type'],\n  }\n});\n\nconst chatHistoryFile = path.join(__dirname, 'chatHistory.json');\n\n// Load chat history from JSON file\nlet chatHistory = [];\nif (fs.existsSync(chatHistoryFile)) {\n  const data = fs.readFileSync(chatHistoryFile, 'utf8');\n  chatHistory = JSON.parse(data);\n}\n\n// Apply CORS middleware globally\napp.use(cors());\napp.use(fileUpload());\napp.use(express.static('uploads')); // Serve uploaded files\n\n// Ensure the uploads directory exists\nconst uploadDir = path.join(__dirname, 'uploads');\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n\nio.on('connection', (socket) => {\n  console.log('Connected');\n\n  // Send chat history to new clients\n  socket.emit('history', chatHistory);\n\n  socket.on('msg', (mydata) => {\n    console.log('Server received: ', mydata);\n    chatHistory.push(mydata);\n    fs.writeFileSync(chatHistoryFile, JSON.stringify(chatHistory, null, 2));\n    io.emit('msg', mydata);\n  });\n\n  socket.on('file-upload', (fileData) => {\n    chatHistory.push(fileData);\n    fs.writeFileSync(chatHistoryFile, JSON.stringify(chatHistory, null, 2));\n    io.emit('file-upload', fileData);\n  });\n});\n\napp.post('/upload', (req, res) => {\n  if (!req.files || Object.keys(req.files).length === 0) {\n    return res.status(400).send('No files were uploaded.');\n  }\n\n  let file = req.files.file;\n  let uploadPath = path.join(__dirname, 'uploads', file.name);\n\n  file.mv(uploadPath, (err) => {\n    if (err) {\n      return res.status(500).send(err);\n    }\n\n    res.json({ fileName: file.name, filePath: `http://192.168.0.27:4000/${file.name}` });\n  });\n});\n\nconst PORT = 4000;\nserver.listen(PORT, () => {\n  console.log(`Listening to port ${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}